/* automatically generated by rust-bindgen 0.71.1 */

#[doc = " Missing dependency."]
pub const webview_error_t_WEBVIEW_ERROR_MISSING_DEPENDENCY: webview_error_t = -5;
#[doc = " Operation canceled."]
pub const webview_error_t_WEBVIEW_ERROR_CANCELED: webview_error_t = -4;
#[doc = " Invalid state detected."]
pub const webview_error_t_WEBVIEW_ERROR_INVALID_STATE: webview_error_t = -3;
#[doc = " One or more invalid arguments have been specified e.g. in a function call."]
pub const webview_error_t_WEBVIEW_ERROR_INVALID_ARGUMENT: webview_error_t = -2;
#[doc = " An unspecified error occurred. A more specific error code may be needed."]
pub const webview_error_t_WEBVIEW_ERROR_UNSPECIFIED: webview_error_t = -1;
#[doc = " OK/Success. Functions that return error codes will typically return this\n to signify successful operations."]
pub const webview_error_t_WEBVIEW_ERROR_OK: webview_error_t = 0;
#[doc = " Signifies that something already exists."]
pub const webview_error_t_WEBVIEW_ERROR_DUPLICATE: webview_error_t = 1;
#[doc = " Signifies that something does not exist."]
pub const webview_error_t_WEBVIEW_ERROR_NOT_FOUND: webview_error_t = 2;
#[doc = " @brief Error codes returned to callers of the API.\n\n The following codes are commonly used in the library:\n - @c WEBVIEW_ERROR_OK\n - @c WEBVIEW_ERROR_UNSPECIFIED\n - @c WEBVIEW_ERROR_INVALID_ARGUMENT\n - @c WEBVIEW_ERROR_INVALID_STATE\n\n With the exception of @c WEBVIEW_ERROR_OK which is normally expected,\n the other common codes do not normally need to be handled specifically.\n Refer to specific functions regarding handling of other codes."]
pub type webview_error_t = ::std::os::raw::c_int;
#[doc = " Holds the elements of a MAJOR.MINOR.PATCH version number."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct webview_version_t {
    #[doc = " Major version."]
    pub major: ::std::os::raw::c_uint,
    #[doc = " Minor version."]
    pub minor: ::std::os::raw::c_uint,
    #[doc = " Patch version."]
    pub patch: ::std::os::raw::c_uint,
}
#[doc = " Holds the library's version information."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct webview_version_info_t {
    #[doc = " The elements of the version number."]
    pub version: webview_version_t,
    #[doc = " SemVer 2.0.0 version number in MAJOR.MINOR.PATCH format."]
    pub version_number: [::std::os::raw::c_char; 32usize],
    #[doc = " SemVer 2.0.0 pre-release labels prefixed with \"-\" if specified, otherwise\n an empty string."]
    pub pre_release: [::std::os::raw::c_char; 48usize],
    #[doc = " SemVer 2.0.0 build metadata prefixed with \"+\", otherwise an empty string."]
    pub build_metadata: [::std::os::raw::c_char; 48usize],
}
#[doc = " Pointer to a webview instance."]
pub type webview_t = *mut ::std::os::raw::c_void;
#[doc = " Top-level window. @c GtkWindow pointer (GTK), @c NSWindow pointer (Cocoa)\n or @c HWND (Win32)."]
pub const webview_native_handle_kind_t_WEBVIEW_NATIVE_HANDLE_KIND_UI_WINDOW:
    webview_native_handle_kind_t = 0;
#[doc = " Browser widget. @c GtkWidget pointer (GTK), @c NSView pointer (Cocoa) or\n @c HWND (Win32)."]
pub const webview_native_handle_kind_t_WEBVIEW_NATIVE_HANDLE_KIND_UI_WIDGET:
    webview_native_handle_kind_t = 1;
#[doc = " Browser controller. @c WebKitWebView pointer (WebKitGTK), @c WKWebView\n pointer (Cocoa/WebKit) or @c ICoreWebView2Controller pointer\n (Win32/WebView2)."]
pub const webview_native_handle_kind_t_WEBVIEW_NATIVE_HANDLE_KIND_BROWSER_CONTROLLER:
    webview_native_handle_kind_t = 2;
#[doc = " Native handle kind. The actual type depends on the backend."]
pub type webview_native_handle_kind_t = ::std::os::raw::c_uint;
#[doc = " Width and height are default size."]
pub const webview_hint_t_WEBVIEW_HINT_NONE: webview_hint_t = 0;
#[doc = " Width and height are minimum bounds."]
pub const webview_hint_t_WEBVIEW_HINT_MIN: webview_hint_t = 1;
#[doc = " Width and height are maximum bounds."]
pub const webview_hint_t_WEBVIEW_HINT_MAX: webview_hint_t = 2;
#[doc = " Window size can not be changed by a user."]
pub const webview_hint_t_WEBVIEW_HINT_FIXED: webview_hint_t = 3;
#[doc = " Window size hints"]
pub type webview_hint_t = ::std::os::raw::c_uint;
unsafe extern "C" {
    #[doc = " Creates a new webview instance.\n\n @param debug Enable developer tools if supported by the backend.\n @param window Optional native window handle, i.e. @c GtkWindow pointer\n        @c NSWindow pointer (Cocoa) or @c HWND (Win32). If non-null,\n        the webview widget is embedded into the given window, and the\n        caller is expected to assume responsibility for the window as\n        well as application lifecycle. If the window handle is null,\n        a new window is created and both the window and application\n        lifecycle are managed by the webview instance.\n @remark Win32: The function also accepts a pointer to @c HWND (Win32) in the\n         window parameter for backward compatibility.\n @remark Win32/WebView2: @c CoInitializeEx should be called with\n         @c COINIT_APARTMENTTHREADED before attempting to call this function\n         with an existing window. Omitting this step may cause WebView2\n         initialization to fail.\n @return @c NULL on failure. Creation can fail for various reasons such\n         as when required runtime dependencies are missing or when window\n         creation fails.\n @retval WEBVIEW_ERROR_MISSING_DEPENDENCY\n         May be returned if WebView2 is unavailable on Windows."]
    pub fn webview_create(
        debug: ::std::os::raw::c_int,
        window: *mut ::std::os::raw::c_void,
    ) -> webview_t;
}
unsafe extern "C" {
    #[doc = " Destroys a webview instance and closes the native window.\n\n @param w The webview instance."]
    pub fn webview_destroy(w: webview_t) -> webview_error_t;
}
unsafe extern "C" {
    #[doc = " Runs the main loop until it's terminated.\n\n @param w The webview instance."]
    pub fn webview_run(w: webview_t) -> webview_error_t;
}
unsafe extern "C" {
    #[doc = " Stops the main loop. It is safe to call this function from another\n background thread.\n\n @param w The webview instance."]
    pub fn webview_terminate(w: webview_t) -> webview_error_t;
}
unsafe extern "C" {
    #[doc = " Schedules a function to be invoked on the thread with the run/event loop.\n\n Since library functions generally do not have thread safety guarantees,\n this function can be used to schedule code to execute on the main/GUI\n thread and thereby make that execution safe in multi-threaded applications.\n\n @param w The webview instance.\n @param fn The function to be invoked.\n @param arg An optional argument passed along to the callback function."]
    pub fn webview_dispatch(
        w: webview_t,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(w: webview_t, arg: *mut ::std::os::raw::c_void),
        >,
        arg: *mut ::std::os::raw::c_void,
    ) -> webview_error_t;
}
unsafe extern "C" {
    #[doc = " Returns the native handle of the window associated with the webview instance.\n The handle can be a @c GtkWindow pointer (GTK), @c NSWindow pointer (Cocoa)\n or @c HWND (Win32).\n\n @param w The webview instance.\n @return The handle of the native window."]
    pub fn webview_get_window(w: webview_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[doc = " Get a native handle of choice.\n\n @param w The webview instance.\n @param kind The kind of handle to retrieve.\n @return The native handle or @c NULL.\n @since 0.11"]
    pub fn webview_get_native_handle(
        w: webview_t,
        kind: webview_native_handle_kind_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[doc = " Updates the title of the native window.\n\n @param w The webview instance.\n @param title The new title."]
    pub fn webview_set_title(w: webview_t, title: *const ::std::os::raw::c_char)
        -> webview_error_t;
}
unsafe extern "C" {
    #[doc = " Updates the size of the native window.\n\n Remarks:\n - Subsequent calls to this function may behave inconsistently across\n   different versions of GTK and windowing systems (X11/Wayland).\n - Using WEBVIEW_HINT_MAX for setting the maximum window size is not\n   supported with GTK 4 because X11-specific functions such as\n   gtk_window_set_geometry_hints were removed. This option has no effect\n   when using GTK 4.\n\n @param w The webview instance.\n @param width New width.\n @param height New height.\n @param hints Size hints."]
    pub fn webview_set_size(
        w: webview_t,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        hints: webview_hint_t,
    ) -> webview_error_t;
}
unsafe extern "C" {
    #[doc = " Navigates webview to the given URL. URL may be a properly encoded data URI.\n\n Example:\n @code{.c}\n webview_navigate(w, \"https://github.com/webview/webview\");\n webview_navigate(w, \"data:text/html,%3Ch1%3EHello%3C%2Fh1%3E\");\n webview_navigate(w, \"data:text/html;base64,PGgxPkhlbGxvPC9oMT4=\");\n @endcode\n\n @param w The webview instance.\n @param url URL."]
    pub fn webview_navigate(w: webview_t, url: *const ::std::os::raw::c_char) -> webview_error_t;
}
unsafe extern "C" {
    #[doc = " Load HTML content into the webview.\n\n Example:\n @code{.c}\n webview_set_html(w, \"<h1>Hello</h1>\");\n @endcode\n\n @param w The webview instance.\n @param html HTML content."]
    pub fn webview_set_html(w: webview_t, html: *const ::std::os::raw::c_char) -> webview_error_t;
}
unsafe extern "C" {
    #[doc = " Injects JavaScript code to be executed immediately upon loading a page.\n The code will be executed before @c window.onload.\n\n @param w The webview instance.\n @param js JS content."]
    pub fn webview_init(w: webview_t, js: *const ::std::os::raw::c_char) -> webview_error_t;
}
unsafe extern "C" {
    #[doc = " Evaluates arbitrary JavaScript code.\n\n Use bindings if you need to communicate the result of the evaluation.\n\n @param w The webview instance.\n @param js JS content."]
    pub fn webview_eval(w: webview_t, js: *const ::std::os::raw::c_char) -> webview_error_t;
}
unsafe extern "C" {
    #[doc = " Binds a function pointer to a new global JavaScript function.\n\n Internally, JS glue code is injected to create the JS function by the\n given name. The callback function is passed a request identifier,\n a request string and a user-provided argument. The request string is\n a JSON array of the arguments passed to the JS function.\n\n @param w The webview instance.\n @param name Name of the JS function.\n @param fn Callback function.\n @param arg User argument.\n @retval WEBVIEW_ERROR_DUPLICATE\n         A binding already exists with the specified name."]
    pub fn webview_bind(
        w: webview_t,
        name: *const ::std::os::raw::c_char,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(
                id: *const ::std::os::raw::c_char,
                req: *const ::std::os::raw::c_char,
                arg: *mut ::std::os::raw::c_void,
            ),
        >,
        arg: *mut ::std::os::raw::c_void,
    ) -> webview_error_t;
}
unsafe extern "C" {
    #[doc = " Removes a binding created with webview_bind().\n\n @param w The webview instance.\n @param name Name of the binding.\n @retval WEBVIEW_ERROR_NOT_FOUND No binding exists with the specified name."]
    pub fn webview_unbind(w: webview_t, name: *const ::std::os::raw::c_char) -> webview_error_t;
}
unsafe extern "C" {
    #[doc = " Responds to a binding call from the JS side.\n\n This function is safe to call from another thread.\n\n @param w The webview instance.\n @param id The identifier of the binding call. Pass along the value received\n           in the binding handler (see webview_bind()).\n @param status A status of zero tells the JS side that the binding call was\n               successful; any other value indicates an error.\n @param result The result of the binding call to be returned to the JS side.\n               This must either be a valid JSON value or an empty string for\n               the primitive JS value @c undefined."]
    pub fn webview_return(
        w: webview_t,
        id: *const ::std::os::raw::c_char,
        status: ::std::os::raw::c_int,
        result: *const ::std::os::raw::c_char,
    ) -> webview_error_t;
}
unsafe extern "C" {
    #[doc = " Get the library's version information.\n\n @since 0.10"]
    pub fn webview_version() -> *const webview_version_info_t;
}
